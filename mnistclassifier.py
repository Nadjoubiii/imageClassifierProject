# -*- coding: utf-8 -*-
"""MNISTClassifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JWwtHHLqTy_EUBor1tu8sqMGOe1qZIYX
"""

from keras.datasets import mnist
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import sklearn as sk
import tensorflow as tf

from PIL import Image, ImageFilter
from keras.models import load_model
from keras.preprocessing import image
from keras import layers, models

(train_X, train_y), (test_X, test_y) = mnist.load_data()

plt.imshow(train_X[0], cmap=plt.get_cmap('gray'))
plt.show()

# for i in range(9):
#   plt.subplot(330 + 1 + i)
#   plt.imshow(test_X[i], cmap=plt.get_cmap('gray'))
#   print(test_y[i])
#   plt.show()

# for i in range(9):
#   plt.subplot(330 + 1 + i)
#   plt.imshow(train_X[i], cmap=plt.get_cmap('gray'))
#   plt.show()

pixels = train_X.shape[1] * train_X.shape[2]
train_X = train_X.reshape(train_X.shape[0], pixels).astype('float32')
test_X = test_X.reshape(test_X.shape[0], pixels).astype('float32')

train_X = train_X / 255
test_X = test_X / 255

train_y = tf.keras.utils.to_categorical(train_y, 10)
test_y = tf.keras.utils.to_categorical(test_y, 10)
num_classes = test_y.shape[1]

model = models.Sequential()
model.add(layers.Reshape((28, 28, 1), input_shape=(784,)))
model.add(layers.Conv2D(32, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(10, activation='softmax'))  # Ensure this output layer matches the label shape

# Compile the model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Train the model
model.fit(train_X, train_y, epochs=5, batch_size=64, validation_split=0.2)

# Evaluate the model
test_loss, test_acc = model.evaluate(test_X, test_y)
print(f'Test accuracy: {test_acc:.4f}')

!pip freeze > requirements.txt
!pip list --format=freeze > requirements.txt
model.save('classifier.h5')

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

test_predictions = model.predict(test_X)
test_predictions = np.argmax(test_predictions, axis=1)
cm = confusion_matrix(np.argmax(test_y, axis=1), test_predictions)
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot()
plt.show()

from keras.preprocessing.image import ImageDataGenerator
from keras.utils import to_categorical

(train_images, train_labels), (test_images, test_labels) = mnist.load_data()

# Reshape the images to 1D arrays of 784 elements
train_images = train_images.reshape((60000, 784)).astype('float32') / 255
test_images = test_images.reshape((10000, 784)).astype('float32') / 255

# Convert the labels to one-hot encoding
train_labels_one_hot = to_categorical(train_labels)
test_labels_one_hot = to_categorical(test_labels)

# Data augmentation
datagen = ImageDataGenerator(
    rotation_range=10,
    width_shift_range=0.1,
    height_shift_range=0.1,
    zoom_range=0.1
)
datagen.fit(train_images.reshape((60000, 28, 28, 1)))

# Define the CNN model (model2)
model2 = models.Sequential()
model2.add(layers.Reshape((28, 28, 1), input_shape=(784,)))
model2.add(layers.Conv2D(32, (3, 3), activation='relu'))
model2.add(layers.Conv2D(32, (3, 3), activation='relu'))
model2.add(layers.MaxPooling2D((2, 2)))
model2.add(layers.Dropout(0.25))
model2.add(layers.Conv2D(64, (3, 3), activation='relu'))
model2.add(layers.Conv2D(64, (3, 3), activation='relu'))
model2.add(layers.MaxPooling2D((2, 2)))
model2.add(layers.Dropout(0.25))
model2.add(layers.Conv2D(128, (3, 3), activation='relu'))
model2.add(layers.MaxPooling2D((2, 2)))
model2.add(layers.Dropout(0.25))
model2.add(layers.Flatten())
model2.add(layers.Dense(128, activation='relu'))
model2.add(layers.Dropout(0.5))
model2.add(layers.Dense(10, activation='softmax'))  # Ensure this output layer matches the label shape

# Compile the model
model2.compile(optimizer='adam',
               loss='categorical_crossentropy',
               metrics=['accuracy'])

# Train the model
model2.fit(datagen.flow(train_images.reshape((60000, 28, 28, 1)), train_labels_one_hot, batch_size=64),
           epochs=5, validation_data=(test_images.reshape((10000, 28, 28, 1)), test_labels_one_hot))

# Make predictions on the test set
test_predictions = model2.predict(test_images.reshape((10000, 28, 28, 1)))
test_predictions_classes = np.argmax(test_predictions, axis=1)

# Compute the confusion matrix
conf_matrix = confusion_matrix(test_labels, test_predictions_classes)

# Display the confusion matrix
disp = ConfusionMatrixDisplay(confusion_matrix=conf_matrix, display_labels=np.arange(10))
disp.plot(cmap=plt.cm.Blues)
plt.show()

